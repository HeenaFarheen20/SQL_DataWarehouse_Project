/*
===========================================================================================
Quality Checks
===========================================================================================
Script Purpose:
This Script performs various checks for data consistency, accuracy, and Standardization
across the 'Silver' schema. It includes checks for:
- Null or duplicate primary keys.
- Unwanted spaces in string fields.
- Data Standardization and consistency.
- Invalid data ranges and orders.
- Data consistency between related fields.
============================================================================================
--Checking First Cutomer_Info Table

Insert into [Silver].[crm_cust_info](
   cst_id,
   cst_key,
   cst_firstname,
   cst_lastname,
   cst_marital_status,
   cst_gndr,
   cst_create_date)
select 
   cst_id,
   cst_key,
   Trim(cst_firstname) as cst_firstname,
   Trim(cst_lastname) as cst_lastname,
   Case
   When Upper(Trim(cst_marital_status)) = 'S' Then 'Single'
   When Upper(Trim(cst_marital_status)) = 'M' Then 'Married'
   else 'N/A'
   End as cst_marital_status,
   Case
   When Upper(Trim(cst_gndr)) = 'F' Then 'Female'
   When Upper(Trim(cst_gndr)) = 'M' Then 'Male'
   else 'N/A'
   End as cst_gndr,
   cst_create_date 
From
(Select 
     *,
	 ROW_NUMBER() over(partition by cst_id order by cst_create_date desc) as flag_last
from [Bronze].[crm_cust_info]
where cst_id is not null)t
where flag_last = 1;

Select * from [Silver].[crm_cust_info];
--------------------------------------------------------------------------------------------------------------
# Checking Second Product Info Table

Insert into [Silver].[crm_prd_info](
prd_id,
cat_id,
prd_key,
prd_nm,
prd_cost,
prd_line,
prd_start_dt,
prd_end_dt 
)
Select 
prd_id,
Replace(SUBSTRING(prd_key ,1,5), '-','_') as cat_id,
SUBSTRING(prd_key, 7, len(prd_key)) as prd_key,
prd_nm,
Isnull(prd_cost, 0) as prd_cost,
Case when UPPER(Trim(prd_line)) = 'R' Then 'Road'
     when UPPER(Trim(prd_line)) = 'M' Then 'Mountain'
	 when UPPER(Trim(prd_line)) = 'S' Then 'Other sales'
	 when UPPER(Trim(prd_line)) = 'T' Then 'Touring'
	 else 'N/A'
End as prd_line,
Cast(prd_start_dt as Date) as prd_start_dt,
Cast(lead(prd_start_dt) over(partition by prd_key order by prd_start_dt)- 1 as Date) as prd_end_dt 
from [Bronze].[crm_prd_info];

Select * from [Silver].[crm_prd_info];
------------------------------------------------------------------------------------------------------------

# Checking Third Table Customer_Sales_detail

Insert Into Silver.crm_sales_details (
sls_ord_num,
sls_prd_key,
sls_cust_id,
sls_order_dt,
sls_ship_dt,
sls_due_dt,
sls_sales,
sls_quantity,
sls_price
)
Select 
sls_ord_num,
sls_prd_key,
sls_cust_id,
CASE WHEN sls_order_dt = 0 OR LEN(sls_order_dt) != 8 Then NULL
     ELSE CAST(CAST(sls_order_dt as VARCHAR) as DATE)
END as sls_order_dt,
CASE WHEN sls_ship_dt = 0 OR LEN(sls_ship_dt) != 8 Then NULL
     ELSE CAST(CAST(sls_ship_dt as VARCHAR) as DATE)
END as sls_ship_dt,
CASE WHEN sls_due_dt = 0 OR LEN(sls_due_dt) != 8 Then NULL
     ELSE CAST(CAST(sls_due_dt as VARCHAR) as DATE)
END as sls_due_dt,
CASE WHEN sls_sales IS NULL OR sls_sales <=0 OR sls_sales != sls_quantity * ABS(sls_price)
     THEN sls_quantity * ABS(sls_price)
  ELSE sls_sales
END AS sls_sales,
sls_quantity,
CASE WHEN sls_price IS NULL OR sls_price <=0
     THEN sls_sales / NULLIF(sls_quantity, 0)
	 ELSE sls_price
END AS sls_price
from Bronze.crm_sales_details;

Select * from [Silver].[crm_sales_details];
--------------------------------------------
---Where sls_ord_num != TRIM(sls_ord_num)--
--Where sls_prd_key NOT IN (Select sls_prd_key From [Silver].[crm_prd_info])--
--Where sls_cust_id NOT IN (Select sls_cust_id From [Silver].[crm_cust_info])--


--Check Invalid date For sls_order_Date
Select 
NULLIF(sls_order_dt , 0) sls_order_dt
from Bronze.crm_sales_details 
Where sls_order_dt <= 0 
OR LEN(sls_order_dt) != 8
OR sls_order_dt > 20500101 
OR sls_order_dt < 19000101

----Check Invalid Date for Sales Ship date
Select 
NULLIF(sls_ship_dt , 0) sls_ship_dt
from Bronze.crm_sales_details 
Where sls_ship_dt <= 0 
OR LEN(sls_ship_dt) != 8
OR sls_ship_dt > 20500101 
OR sls_ship_dt < 19000101

----Check Invalid Date for Sales Due date
Select 
NULLIF(sls_due_dt , 0) sls_due_dt
from Bronze.crm_sales_details 
Where sls_due_dt <= 0 
OR LEN(sls_due_dt) != 8
OR sls_due_dt > 20500101 
OR sls_due_dt < 19000101

---Check for Invalid Dates Orders
Select 
* 
from Bronze.crm_sales_details
WHERE sls_order_dt > sls_ship_dt OR sls_order_dt > sls_due_dt


--Check Data Consistency Between: SAles, Quantity, Price
Select DISTINCT
sls_sales,
sls_quantity,
sls_price
from Bronze.crm_sales_details
Where sls_sales != sls_price * sls_quantity 
OR sls_sales IS NULL OR sls_quantity IS NULL OR sls_price IS NULL
OR sls_sales <= 0 OR sls_quantity <= 0 OR sls_price <= 0
order BY sls_sales, sls_quantity, sls_price;

Select DISTINCT  
sls_sales as old_sales,
sls_quantity,
sls_price as old_price,
CASE WHEN sls_sales IS NULL OR sls_sales <=0 OR sls_sales != sls_quantity * ABS(sls_price)
     THEN sls_quantity * ABS(sls_price)
  ELSE sls_sales
END AS sls_sales,
CASE WHEN sls_price IS NULL OR sls_price <=0
     THEN sls_sales / NULLIF(sls_quantity, 0)
	 ELSE sls_price
END AS sls_price
from Bronze.crm_sales_details
ORDER BY 1,2,3,4,5
---------------------------------------------------------------------------------------
#Checking Fourth Table ERP Customer TAble

Insert into [Silver].[erp_cust_az12](
CID,
BDATE,
GEN
)
Select 
CASE WHEN CID like 'NAS%' Then SUBSTRING(CID, 4, Len(CID))
     Else CID
End as CID,
CASE WHEN BDATE > GETDATE() Then NULL -----Set future Birthdates as NULL
     Else BDATE
End as BDATE,
Case when UPPER(TRim(GEN)) IN ('F', 'FEMALE') THEN 'Female'
      when UPPER(TRim(GEN)) IN ('M' ,'MALE') THEN 'Male'
	  Else 'N/A'
End as GEN
from [Bronze].[erp_cust_az12];
--------------
Check Outranged Date of Birth--
Select BDATE 
from [Bronze].[erp_cust_az12]
Where BDATE < '1924 -01-01' OR BDATE > GETDATE();

Checking the Gender inappropriate data and Normalise them.
Select Distinct(GEN),
 Case when UPPER(TRim(GEN)) IN ('F', 'FEMALE') THEN 'Female'
      when UPPER(TRim(GEN)) IN ('M' ,'MALE') THEN 'Male'
	  Else 'N/A'
End as GEN
from [Bronze].[erp_cust_az12];
---------------------------------------------------------------------------------------------------------------
# Checking Fifth Table ERP Customer Location

Insert Into [Silver].[erp_loc_a101](
CID, 
CNTRY
)
Select 
Replace(CID, '-', '') CID,
Case when TRIM(CNTRY) = 'DE' Then 'Germany'
     when TRIM(CNTRY) IN ('US' , 'USA') Then 'United States'
	 when TRIM(CNTRY) = '' OR CNTRY is NULL Then 'N/A'
	 Else TRIM(CNTRY)
End as CNTRY
from [Bronze].[erp_loc_a101];

--Data Standardrized and Consistency of country column--
Select Distinct CNTRY,
Case when TRIM(CNTRY) = 'DE' Then 'Germany'
     when TRIM(CNTRY) IN ('US' , 'USA') Then 'United States'
	 when TRIM(CNTRY) = '' OR CNTRY is NULL Then 'N/A'
	 Else TRIM(CNTRY)
End as CNTRY
from [Bronze].[erp_loc_a101];
---where Replace(CID, '-', '') not in 
----(Select cst_key from [Silver].[crm_cust_info]);

-----------------------------------------------------------------------------------------------------------
# Checking Sixth Table ERP Category 

Insert Into [Silver].[erp_px_cat_g1v2](
ID, 
CAT, 
SUBCAT, 
MAINTENANCE
)
Select 
ID,
CAT,
SUBCAT,
MAINTENANCE
from [Bronze].[erp_px_cat_g1v2];

--Check for Unwanted Space
SElect * from [Bronze].[erp_px_cat_g1v2]
where CAT != TRIM(CAT) OR SUBCAT != TRIM(SUBCAT) OR MAINTENANCE != TRIM(MAINTENANCE);

--Check Data Consistency & Standardrization
SELECT Distinct
MAINTENANCE
from [Bronze].[erp_px_cat_g1v2];
